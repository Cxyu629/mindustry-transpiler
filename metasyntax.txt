
Expr = L2
L2   = L3 (Or L3)*                                             or
L3   = L4 (And L4)*                                            and
L4   = L5 ("|" L5)*                                            bit_or
L5   = L6 ("^" L6)*                                            bit_xor
L6   = L7 ("&" L7)*                                            bit_and
L7   = L8 ( ( "==" | "!=" | "===" ) L8 )*                      equality
L8   = L9 ( ( "<" | "<=" | ">" | ">=" ) L9 )*                  relational
L9   = L10 ( ( "<<" | ">>" ) L10 )*                            bit_shift
L10  = L11 ( ( "+" | "-" ) L11 )*                              term
L11  = L12 ( ( "*" | "/" | "%" | "//" ) L12 )*                 factor
L12  = (( "+" | "-" | "~" | Not ) L12) | L13                   unary
L13  = (L14 "**" (L13 | L12)) | L14                            exponential
L14  = Number | String | Degree | True | False | "(" Expr ")"  literal


program = (Statement | Block)* EOF

Block = "{" Statement* "}"

Statement = ;
          | Class
          | Function
          | VarStatement
          | ExpressionStatement

VarStatement = `Var` Ident ( "=" `Expr` )? ";"

Function = `fun` Ident "(" (Ident ":" Type ("," Ident: Type )* )? ")" Block

Class = `class` Ident "{" VarStatement* Function* "}"

FunctionParameter = 

ExpressionStatement = 